from libraries.sql import *
from libraries.utils import *
import datetime
import re

month = ("—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", 
		 "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è")

class User():
	def __init__(self, l9Id):
		self.l9Id = l9Id
		self.timestamp = datetime.now()
		
	def isStart():
		pass

class Bot():
	
	platforms = {"VK":"vkId","TG":"tgId"}
	group_num_format = re.compile('\d{4}')
	
	def __init__(self, db, shedule):
		self.l9lk = db
		self.users_id = {"VK":{}, "TG":{}}
		self.users_db = {}
		self.shedule = shedule
		
	def checkMessage(self, msg):
		
		platform = msg['platform']
		uid = msg['uid']
		text = msg['text']
		
		if uid not in self.users_id[platform]:
			if platform == 'TG':
				l9Id = tg_db.initUser(uid)
				self.users_id[platform][uid] = l9Id
		else:
			l9Id = self.users_id[platform][uid]
		
		tag = self.l9lk.db.get(TG_DB.users_table, 
					f"{Bot.platforms[platform]} = {uid}", 
					["pos_tag"])
		
		tag = tag[0][0]
		
		if tag == 'not_started':
			if text != '/start':
				return ['–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å']
			else:
				self.changeTag(uid, 'started', platform)
				return ['–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è!',
						'–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞—Ä–∞—Ö!',
						'–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, –æ—Ç–∫—É–¥–∞ —Ç—ã\n' 
						'–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –∫—Ä–∞—Ç–∫–æ–π —Ñ–æ—Ä–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2305)']
			
		elif tag == 'started':
			if Bot.group_num_format.match(text) is None:
				return ['–ì—Ä—É–ø–ø–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!']
			else:
				result = self.l9lk.db.get(
					Shedule_DB.groups_table,
					f'groupNumber = {text}', 
					['groupId','specName']				
				)
				
				if result != []:
					result = result[0]
					self.changeTag(uid, 'ready', platform)
					self.l9lk.db.update(
						L9LK.users_table,
						f"l9Id = {l9Id}",
						f"groupId = '{result[0]}'"
					)						
					return [f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞ {text}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "{result[1]}", —É–∂–µ –µ—Å—Ç—å –≤ –º–æ–µ–π –±–∞–∑–µ!']
				else:
					return ['–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤ –º–æ–µ–π –±–∞–∑–µ –µ—â—ë –Ω–µ—Ç :(']
				
		elif tag == 'ready':
			if text == '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞':
				return[self.nearLesson(l9Id)]
			elif text == '–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞':
				return[self.nextLesson(l9Id)]
			elif text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
				return[self.dayShedule(l9Id)]			
			return ['A–π!']
		else:
			return ['–û–π!']
		
	def nearLesson(self, l9Id):
		now = datetime.datetime.now()
		lessonId, date = self.shedule.nearLesson(l9Id, now)
		if lessonId != None:
			lesson = self.shedule.getLesson(lessonId)
			
			if date.date() > now.date():
				text = f'‚ùóÔ∏è –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç\n–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ '
				if date.date() - now.date() == datetime.timedelta(days=1):
					text += '–∑–∞–≤—Ç—Ä–∞:\n\n'
				else:
					text +=  f'{date.day} {month[date.month-1]}:\n\n'
				
			elif date.time() > now.time():
				text = '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'	
			else: 
				text = '–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞:\n\n'	
				
			text += self.strLesson(lesson)
			
		else:
			text = '–û–π! –ó–∞–Ω—è—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!'

		return text
	
	def nextLesson(self, l9Id):
		now = datetime.datetime.now()
		lessonId, date = self.shedule.nextLesson(l9Id, now)
		if lessonId != None:
			lesson = self.shedule.getLesson(lessonId)
			
			if date.date() > now.date():
				text = f'‚ùóÔ∏è –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –¥–∞–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç\n–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –ø–æ—Å–ª–µ –±–ª–∏–∂–∞–π—à–µ–π '
				if date.date() - now.date() == datetime.timedelta(days=1):
					text += '–∑–∞–≤—Ç—Ä–∞:\n\n'
				else:
					text +=  f'{date.day} {month[date.month-1]}:\n\n'
				
			elif date.time() > now.time():
				text = '–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'	
				
			text += self.strLesson(lesson)
			
		else:
			text = '–û–π! –ó–∞–Ω—è—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!'

		return text
	
	def dayShedule(self, l9Id):
		now = datetime.datetime.now()
		lessonIds, date = self.shedule.getDay(l9Id, now)
		
		if now.date() < date.date():
			text = '‚ùóÔ∏è –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç\n–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è '
			if date.date() - now.date() == datetime.timedelta(days=1):
				text += '–∑–∞–≤—Ç—Ä–∞:\n\n'
			else:
				text +=  f'{date.day} {month[date.month-1]}:\n\n'			
		elif now.date() == date.date():
			text = 'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'
		
		if lessonIds != None:
			for lid in lessonIds:
				lesson = self.shedule.getLesson(lid)
				text += self.strLesson(lesson) + "\n\n"
		else:
			text = '–û–π! –ó–∞–Ω—è—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!'

		return text
	
	def strLesson(self, lesson):
		begin = lesson['begin']
		end = lesson['end']
		text = ("üìÜ %02i:%02i - %02i:%02i\n" % (begin.hour, begin.minute, end.hour, end.minute))
		add_info = "" if lesson['add_info'] == None else "\n"+lesson['add_info']
		teacher = "" if lesson['teacher'] == None else "\nüë§ "+lesson['teacher']
		text += f"{lesson['type']} {lesson['name']}\nüß≠ {lesson['place']}{teacher}{add_info}"
		return text
				
	def changeTag(self, uid, tag, platform = "TG"):
		table = TG_DB.users_table if platform == "TG" else ""
		self.l9lk.db.update(
			TG_DB.users_table,
			f"{Bot.platforms[platform]} = {uid}",
			f"pos_tag = '{tag}'"
			)	
		
	def checkLesson(self, time):
		lessons, first_lessons = self.shedule.checkLesson(time)
		last_lessons = self.shedule.lastLesson(time)
		
		mailing = {}
		
		for groupId, lesson in lessons:
			text = "‚ùóÔ∏è –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: \n\n"
			text += self.strLesson(lesson)
			mailing[groupId] = text
			
		for groupId, lesson in first_lessons:
			text = "‚ùóÔ∏è –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞: \n\n"
			text += self.strLesson(lesson)
			mailing[groupId] = text
			
		for groupId, lesson in last_lessons:
			text = "‚ùóÔ∏è –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –±–æ–ª—å—à–µ –Ω–µ—Ç"	
			mailing[groupId] = text
			
		return mailing
			
	def groupMailing(self, bot, groupId, msg):
		group = self.l9lk.db.get(L9LK.users_table, 
							f'groupId = {groupId}', 
							['l9Id'])	
		if group != []:
			for user in group:
				tg_id = self.l9lk.db.get(TG_DB.users_table, 
							f'l9Id = {user[0]}', 
							['tgId'])
				if tg_id != []:
					bot.sendMessage(tg_id[0][0], msg, tg_bot.keyboard())
	
if __name__ == "__main__":
	config = loadJSON("config")
	l9lk = L9LK(config['sql'])
	tg_db = TG_DB(l9lk)
	sh_db = Shedule_DB(l9lk)
	bot = Bot(l9lk, sh_db)
	
	from libraries.tg_bot import TGbot
	
	tg_bot = TGbot(config['tg']['token'])
	
	timer = datetime.datetime(2022,1,1)
	
	print("Bot ready!")
	
	while True:
		msgs = tg_bot.checkMessages()
		for msg in msgs:
			print(msg)
			answer = bot.checkMessage(msg)
			for i in answer:
				tg_bot.sendMessage(msg['uid'], i, tg_bot.keyboard())	
		
		now = datetime.datetime.now()		
		if now - timer > datetime.timedelta(minutes=5):
			timer = now.replace(minute=now.minute//5*5, second=0, microsecond=0)
			print("check "+now.isoformat())
			#timer = datetime.datetime(2022,10,11,21,55)
			mail = bot.checkLesson(timer)
			
			for groupId, msg in mail.items():
				bot.groupMailing(tg_bot, groupId, msg)			

