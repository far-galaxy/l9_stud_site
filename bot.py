from libraries.sql import *
from libraries.utils import *
import datetime
import re
from time import sleep

import logging
logger = logging.getLogger(__name__)


month = ("—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", 
		 "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è")

class Bot():
	
	platforms = {"VK":"vkId","TG":"tgId"}
	group_num_format = re.compile('\d{4}')
	
	def __init__(self, db, shedule):
		self.l9lk = db
		self.users_id = {"VK":{}, "TG":{}}
		self.users_db = {}
		self.shedule = shedule
		
	def checkMessage(self, msg):
		
		platform = msg['platform']
		uid = msg['uid']
		text = msg['text']
		name = msg['name']
		
		tag, l9Id = self.getTag(msg)
		
		if tag == 'not_started':
			if text != '/start':
				return ['–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å']
			else:
				self.changeTag(uid, 'started', platform)
				return ['–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è!',
						'–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞—Ä–∞—Ö!',
						'–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, –æ—Ç–∫—É–¥–∞ —Ç—ã\n' 
						'–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –∫—Ä–∞—Ç–∫–æ–π —Ñ–æ—Ä–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2305)']
			
		elif tag == 'started':
			if Bot.group_num_format.match(text) is None:
				return ['–ì—Ä—É–ø–ø–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!']
			else:
				result = self.l9lk.db.get(
					Shedule_DB.groups_table,
					f'groupNumber = {text}', 
					['groupId','specName']				
				)
				
				if result != []:
					result = result[0]
					self.l9lk.db.insert(
						Shedule_DB.gu_table,
						{'l9Id' : l9Id,
						 'groupId' : result[0]}
					)	
					self.changeTag(uid, 'ready', platform)
					return [f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞ {text}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "{result[1]}", —É–∂–µ –µ—Å—Ç—å –≤ –º–æ–µ–π –±–∞–∑–µ!',
							'‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–Ω—ã —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ\n–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ –ø–∏—à–∏—Ç–µ –µ–º—É –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ: –∞–≤—Ç–æ—Ä –∑–∞–º–µ—Ç–∏—Ç –∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∏—Å–ø—Ä–∞–≤–∏—Ç –æ—à–∏–±–∫—É, –∏ –±–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç :)']
				else:
					return ['–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤ –º–æ–µ–π –±–∞–∑–µ –µ—â—ë –Ω–µ—Ç :(']
				
		elif tag == 'ready':
			if text == '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞':
				return[self.nearLesson(l9Id)]
			elif text == '–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞':
				return[self.nextLesson(l9Id)]
			elif text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
				return[self.dayShedule(l9Id)]
			elif text[0] == '/':
				text = text.split()
				cmd = text[0]
				arg = text[1:] if len(text) > 1 else None
				if cmd == '/help':
					return [open('libraries/help', encoding='utf-8').read()]
				if cmd == '/first_time':
					if arg == None:
						self.changeTag(uid, 'first_time', platform)
						return ["–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã (–æ—Ç 20 –¥–æ 240)"]
					else:
						return [self.changeFirstTime(l9Id, arg[0])]
				if str(uid) == config["tg"]["admin"]:
					if cmd == "/mail":
						self.groupMailing(tg_bot, arg[0], " ".join(arg[1:]))
						return["–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"]

			return ['A–π!']
		# Commands
		elif tag == 'first_time':
			ans = self.changeFirstTime(l9Id, text)
			if ans.find("!") != -1:
				self.changeTag(uid, 'ready', platform)
			return [ans]
		
		else:
			return ['–û–π!']
		
	def getTag(self, msg):
		platform = msg['platform']
		uid = msg['uid']
		text = msg['text']
		name = msg['name']
		
		if uid not in self.users_id[platform]:
			if platform == 'TG':
				l9Id = tg_db.initUser(uid, name)
				self.users_id[platform][uid] = l9Id
		else:
			l9Id = self.users_id[platform][uid]
	
		tag = self.l9lk.db.get(TG_DB.users_table, 
							   f"{Bot.platforms[platform]} = {uid}", 
							   ["pos_tag"])
	
		return tag[0][0], l9Id
	
	def changeFirstTime(self, l9Id, time):
		try:
			time = int(time)
			if time > 240:
				return "–û–π, –∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –∑–∞—Ä–∞–Ω–µ–µ —Ç–µ–±–µ –Ω–∞–¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∞—Ä–∞—Ö?)\n–ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
			elif time < 20:
				return "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —è —Ç–µ–±–µ –±—É–¥—É —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä, —Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ —É—Å–ø–µ–µ—à—å —Å–æ–±—Ä–∞—Ç—å—Å—è –∏ –¥–æ–±–µ–∂–∞—Ç—å –¥–æ —É–Ω–∏–≤–µ—Ä–∞ (–Ω—É –∏–ª–∏ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –æ–Ω–ª–∞–π–Ω)\n–ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"	
			else:
				self.l9lk.db.update(
					L9LK.users_table,
					f"l9Id = {l9Id}",
					f"first_time = {time}"
				)	
				return "–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
		except ValueError:
			return "–û–π, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ ):\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä"
		
	def nearLesson(self, l9Id):
		now = datetime.datetime.now()
		lessonId, date = self.shedule.nearLesson(l9Id, now)
		if lessonId != None:
			lesson = self.shedule.getLesson(lessonId)
			
			if date.date() > now.date():
				text = f'‚ùóÔ∏è –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç\n–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ '
				if date.date() - now.date() == datetime.timedelta(days=1):
					text += '–∑–∞–≤—Ç—Ä–∞:\n\n'
				else:
					text +=  f'{date.day} {month[date.month-1]}:\n\n'
				
			elif date.time() > now.time():
				text = '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'	
			else: 
				text = '–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞:\n\n'	
				
			text += self.strLesson(lesson)
			
		else:
			text = '–û–π! –ó–∞–Ω—è—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!'

		return text
	
	def nextLesson(self, l9Id):
		now = datetime.datetime.now()
		lessonId, date = self.shedule.nextLesson(l9Id, now)
		if lessonId != None:
			lesson = self.shedule.getLesson(lessonId)
			
			if date.date() > now.date():
				text = f'‚ùóÔ∏è –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –¥–∞–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç\n–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –ø–æ—Å–ª–µ –±–ª–∏–∂–∞–π—à–µ–π '
				if date.date() - now.date() == datetime.timedelta(days=1):
					text += '–∑–∞–≤—Ç—Ä–∞:\n\n'
				else:
					text +=  f'{date.day} {month[date.month-1]}:\n\n'
				
			elif date.time() > now.time():
				text = '–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'	
				
			text += self.strLesson(lesson)
			
		else:
			text = '–û–π! –ó–∞–Ω—è—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!'

		return text
	
	def dayShedule(self, l9Id):
		now = datetime.datetime.now()
		lessonIds, date = self.shedule.getDay(l9Id, now)
		
		if lessonIds != None:
			if now.date() < date.date():
				text = '‚ùóÔ∏è –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç\n–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è '
				if date.date() - now.date() == datetime.timedelta(days=1):
					text += '–∑–∞–≤—Ç—Ä–∞:\n\n'
				else:
					text +=  f'{date.day} {month[date.month-1]}:\n\n'			
			elif now.date() == date.date():
				text = 'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'
				
			for lid in lessonIds:
				lesson = self.shedule.getLesson(lid)
				text += self.strLesson(lesson) + "\n\n"
		else:
			text = '–û–π! –ó–∞–Ω—è—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!'

		return text
	
	def strLesson(self, lesson):
		begin = lesson['begin']
		end = lesson['end']
		text = ("üìÜ %02i:%02i - %02i:%02i\n" % (begin.hour, begin.minute, end.hour, end.minute))
		add_info = "" if lesson['add_info'] == None else "\n"+lesson['add_info']
		teacher = "" if lesson['teacher'] == None else "\nüë§ "+lesson['teacher']
		text += f"{lesson['type']} {lesson['name']}\nüß≠ {lesson['place']}{teacher}{add_info}"
		return text
				
	def changeTag(self, uid, tag, platform = "TG"):
		table = TG_DB.users_table if platform == "TG" else ""
		self.l9lk.db.update(
			table,
			f"{Bot.platforms[platform]} = {uid}",
			f"pos_tag = '{tag}'"
			)	
		
	def checkLesson(self, time):
		lessons, first_lessons = self.shedule.checkLesson(time)
		last_lessons = self.shedule.lastLesson(time)
		
		mailing = {}
		
		for groupId, lesson in lessons:
			text = "‚ùóÔ∏è –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: \n\n"
			text += self.strLesson(lesson)
			mailing[groupId] = text
			
		for groupId, lesson in first_lessons:
			text = "‚ùóÔ∏è –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞: \n\n"
			text += self.strLesson(lesson)
			mailing[groupId] = text
			
		for groupId, lesson in last_lessons:
			text = "‚ùóÔ∏è –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –±–æ–ª—å—à–µ –Ω–µ—Ç"	
			mailing[groupId] = text
			
		return mailing
			
	def groupMailing(self, bot, groupId, msg):
		group = self.l9lk.db.get(Shedule_DB.gu_table, 
							f'groupId = {groupId}', 
							['l9Id'])	
		if group != []:
			for user in group:
				tg_id = self.l9lk.db.get(TG_DB.users_table, 
							f'l9Id = {user[0]}', 
							['tgId'])
				if tg_id != []:
					bot.sendMessage(tg_id[0][0], msg, tg_bot.keyboard())
					
	def firstMailing(self, bot, time):
		self.shedule.firstTimeCheck(time)
		str_time = time.isoformat(sep=' ')
		
		mail = self.l9lk.db.execute(f"""
							SELECT tgId, lessonId, u.first_time FROM first_mail AS fm 
							JOIN l9_users AS u ON fm.l9Id = u.l9Id
							JOIN tg_bot AS t ON t.l9Id = fm.l9Id
							WHERE fm.mailTime = '{str_time}';""").fetchall();
		if time.hour < 11:
			head = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ üåÖ\n"
		elif time.hour >= 11 and time.hour < 16:
			head = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å ‚òÄÔ∏è\n"
		else:
			head = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä üåÉ\n"
		if mail != []:
			for user in mail:
				mn = user[2] % 10
				end = ""
				if mn == 1:
					end = "—É"
				elif mn > 1 and mn < 5:
					end = "—ã"
				text = f"{head}–ß–µ—Ä–µ–∑ {user[2]} –º–∏–Ω—É—Ç{end} –Ω–∞—á–Ω—É—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è\n\n–ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞:\n"
				text += self.strLesson(self.shedule.getLesson(user[1]))
				bot.sendMessage(user[0], text, tg_bot.keyboard())
				
	def nextDay(self, bot, time):
		lessons = self.shedule.checkNextDay(time)
		
		if lessons != []:
			for group, day in lessons:
				text = "‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n–ó–∞–≤—Ç—Ä–∞ –±—É–¥—É—Ç –∑–∞–Ω—è—Ç–∏—è:\n\n"
				for lid in day:
					lesson = self.shedule.getLesson(lid[0])
					text += self.strLesson(lesson) + "\n\n"
				self.groupMailing(bot, group, text)
				
	
if __name__ == "__main__":
	initLogger(logger)
	logger.info("Restart bot")
	
	config = loadJSON("config")
	l9lk = L9LK(config['sql'])
	tg_db = TG_DB(l9lk)
	sh_db = Shedule_DB(l9lk)
	bot = Bot(l9lk, sh_db)
	
	from libraries.tg_bot import TGbot
	
	tg_bot = TGbot(config['tg']['token'])
	
	timer = datetime.datetime(2022,1,1)
	
	logger.info("Bot ready!")
	
	while True:
		msgs = tg_bot.checkMessages()
		for msg in msgs:
			logger.info(msg.values())
			answer = bot.checkMessage(msg)
			tag, _ = bot.getTag(msg)
			key = tg_bot.keyboard() if tag == 'ready' else None
			if isinstance(answer, list): 
				for i in answer:
					tg_bot.sendMessage(msg['uid'], i, key)	
					
			elif isinstance(answer, Exception): 
				logger.error(answer, exc_info=True)
			else:
				if answer == "Flood Stop":
					sleep(5)
				else:
					logger.warning(answer)
		
		now = datetime.datetime.now()	
		if now - timer > datetime.timedelta(minutes=5):
			timer = now.replace(minute=now.minute//5*5, second=0, microsecond=0)
			logger.debug("check "+now.isoformat())
			#timer = datetime.datetime(2022,10,20,18,00)
			bot.firstMailing(tg_bot, timer)
			
			mail = bot.checkLesson(timer)
			for groupId, msg in mail.items():
				bot.groupMailing(tg_bot, groupId, msg)
				
			if timer.hour == 19 and timer.minute == 00:
				bot.nextDay(tg_bot, now)

